import React, { Component } from 'react';
import { connect } from 'react-redux';
import './IndividualSection.css';

import image1 from '../../img/ind/ind1.jpg';
import image2 from '../../img/ind/ind2.jpg';
import image3 from '../../img/ind/ind3.jpg';


class IndividualSection extends Component {
  render() {
    const { menu } = this.props;
    const style = {
      paddingTop: menu.height + 20,
    }

    return (
      <div className="individual-section" style={menu.className === 'fixed' ? style : null}>
        <div className="container">
          <h1 className="individual-section__title">Проектирование и разработка современных веб-приложений</h1>
          <nav className="individual-section__content">
            <h2 className="individual-section__content-title">Содержание</h2>
            <ul className="individual-section__content-list">
              <li className="individual-section__content-list-item">
                <span className="individual-section__content-list-item-number">1</span>
                <span className="individual-section__content-list-item-text">Структура современных веб-приложений</span>
              </li>
              <li className="individual-section__content-list-item">
                <span className="individual-section__content-list-item-number">2</span>
                <span className="individual-section__content-list-item-text">Обзор бесплатных сервисов для хостинга веб-приложений</span>
              </li>
              <li className="individual-section__content-list-item">
                <span className="individual-section__content-list-item-number">3</span>
                <span className="individual-section__content-list-item-text">Создание веб-приложений для распознавания рукописных цифр</span>
                <ul className="individual-section__content-sublist">
                  <li className="individual-section__content-sublist-item">
                    <span className="individual-section__content-sublist-item-number">3.1</span>
                    Распознавание рукописных символов
                  </li>
                  <li className="individual-section__content-sublist-item">
                    <span className="individual-section__content-sublist-item-number">3.2</span>
                    Обзор популярных библиотек для построения нейросетей
                  </li>
                  <li className="individual-section__content-sublist-item">
                    <span className="individual-section__content-sublist-item-number">3.3</span>
                    Создание нейросетей с помощью популярных библиотек и сравнение классификации построенных нейросетей
                  </li>
                  <li className="individual-section__content-sublist-item">
                    <span className="individual-section__content-sublist-item-number">3.4</span>
                    Создание веб-приложения с помощью Python Django Framework
                  </li>
                </ul>
              </li>
              <li className="individual-section__content-list-item">
                <span className="individual-section__content-list-item-number">4</span>
                <span className="individual-section__content-list-item-text">Размещение веб-приложения на платформе Heroku</span>
              </li>
              <li className="individual-section__content-list-item">
                <span className="individual-section__content-list-item-text">Список источников</span>
              </li>
            </ul>
          </nav>
          <article className="abstract__text">
            <div className="abstract__text-part">
              <span>1</span>
              <h3>Структура современных веб-приложений</h3>
              <div className="abstract__text-block">
                <p>Веб-приложение — клиент-серверное приложение, в котором клиент взаимодействует с сервером при помощи браузера, а за сервер отвечает&nbsp;—&nbsp;веб-сервер. Логика веб-приложения распределена между сервером и клиентом, хранение данных осуществляется, преимущественно, на сервере, обмен информацией происходит по сети. Одним из преимуществ такого подхода является тот факт, что клиенты не зависят от конкретной операционной системы пользователя, поэтому веб-приложения являются межплатформенными службами.</p>
                <p>Давайте для простоты будем пока считать, что веб-приложение и веб-сайт - одно и то же. Не всегда веб-приложение является сайтом, и наоборот, но  поскольку мы будем рассматривать самый простой вариант, то можно не вдаваться в подробности.</p>
                <p>Чаще всего веб-приложения состоят как минимум из трёх основных компонентов:</p>
                <p><span className="individual-section__content-list-item-number">1.</span>Клиентская часть веб приложения — это графический интерфейс. Это то, что вы видите на странице. Графический интерфейс отображается в браузере. Пользователь взаимодействует с веб-приложением именно через браузер, кликая по ссылкам и кнопкам.</p>
                <p><span className="individual-section__content-list-item-number">2.</span>Серверная часть веб-приложения — это программа или скрипт на сервере, обрабатывающая запросы пользователя (точнее, запросы браузера). Чаще всего серверная часть веб-приложения программируется на PHP. При каждом переходе пользователя по ссылке браузер отправляет запрос к серверу. Сервер обрабатывает этот запрос, вызывая некоторый скрипт, который формирует веб-страничку, описанную языком HTML, и отсылает клиенту по сети. Браузер тут же отображает полученный результат в виде очередной веб-страницы.</p>
                <p><span className="individual-section__content-list-item-number">1.</span>База данных (БД, или система управления баазми данных, СУБД) — программное обеспечение на сервере, занимающееся хранением данных и их выдачей в нужный момент. В случае форума или блога, хранимые в БД данные — это посты, комментарии, новости, и так далее. База данных располагается на сервере. Серверная часть веб-приложения обращается к базе данных, извлекая данные, которые необходимы для формирования страницы, запрошенной пользователем.</p>
                <p>Для разработки веб-приложений можно использовать практически любые современные языки программирования:</p>
                <p><span className="individual-section__content-list-item-number">1.</span>PHP</p>
                <p><span className="individual-section__content-list-item-number">2.</span>Python</p>
                <p><span className="individual-section__content-list-item-number">3.</span>Node.js</p>
                <p><span className="individual-section__content-list-item-number">4.</span>Ruby</p>
                <p><span className="individual-section__content-list-item-number">5.</span>платформа .NET (языки VB.NET, C# и другие, поддерживаемые .NET)</p>
                <p><span className="individual-section__content-list-item-number">6.</span>Java</p>
                <p><span className="individual-section__content-list-item-number">7.</span>Go</p>
                <p><span className="individual-section__content-list-item-number">8.</span>C/C++</p>
                <p>Независимо от языка, на котором написана серверная часть веб-приложения, способы обработки запросов и взаимодействия с пользователем остаются те же.</p>
                <p>В дальнейшем в ходе освоения веб-технологий будем опираться на язык Python, поскольку разрабатывать веб-приложения на «Питоне» с помощью Django Framework легко и приятно.</p>
                <p>Основной язык, которым описывается графический интерфейс веб-приложения — это HTML. Этот язык описывает структуру веб-страницы. Художественное оформление веб страниц описывается таблицами стилей — CSS.</p>
                <p>Чтобы «оживить» графический интерфейс используют JavaScript — интерпретируемый язык программирования, который позволяет легко взаимодействовать с элементами на графического интерфейса</p>
                <p>В последнее время появляется множество инструментов, которые позволяют существенно облегчить и ускорить разработку графических интерфейсов веб-приложений. Так, например, можно использовать различные шаблонизаторы, которые добавляют создавать переменные, функции и значительно сократить «простыню» HTML разметки. Наиболее известные примеры HTML шаблонизаторов: <a href="https://www.npmjs.com/package/jade" target="_blank" rel="noopener noreferrer">Jade</a> и <a href="https://reactjs.org/docs/introducing-jsx.html" target="_blank" rel="noopener noreferrer">JSX</a> (используемый в библиотеке React.js)</p>
                <p>Для написания CSS стили, можно использовать препроцессоры (<a href="https://less-lang.info/" target="_blank" rel="noopener noreferrer">LESS</a>, <a href="https://sass-scss.ru/" target="_blank" rel="noopener noreferrer">Sass</a>), которые также позволяют создавать переменные, функции.</p>
                <p>Также стоит отметить популярные JavaScript библиотеки, которые упрощают разработку больших проектов со сложными интерфейсами. Наиболее популярными JS библиотеками сейчас являются <a href="https://github.com/facebook/react" target="_blank" rel="noopener noreferrer">React.js</a>, поддерживаемая компанией Facebook, <a href="https://angular.io/" target="_blank" rel="noopener noreferrer">Angular.js</a>, поддерживаемая Google и <a href="https://vuejs.org/" target="_blank" rel="noopener noreferrer">Vue.js</a>.</p>
              </div>
            </div>
            <div className="abstract__text-part">
              <span>2</span>
              <h3>Обзор бесплатных сервисов для хостинга веб-приложений</h3>
              <div className="abstract__text-block">
                <p>Рассмотрим два наиболее популярных сервиса для хранения и хостинга своих веб-приложений: <a href="https://github.com/" target="_blank" rel="noopener noreferrer">Github</a> и <a href="https://www.heroku.com/" target="_blank" rel="noopener noreferrer">Heroku</a>.</p>
                <p>Github — крупнейший веб-сервис для хостинга IT-проектов и их совместной разработки. Создатели сайта называют GitHub «социальной сетью для разработчиков». Кроме размещения кода, участники могут общаться, комментировать правки друг друга, а также следить за новостями знакомых. С помощью широких возможностей Git программисты могут объединять свои репозитории — GitHub предлагает удобный интерфейс для этого и может отображать вклад каждого участника в виде дерева. Для проектов есть личные страницы, небольшие Вики и система отслеживания ошибок. Прямо на сайте можно просмотреть файлы проектов с подсветкой синтаксиса для большинства языков программирования.</p>
                <p>Heroku — облачная PaaS-платформа, поддерживающая ряд языков программирования. С 2010 года является дочерней компанией Salesforce.com. Heroku, одна из первых облачных платформ, появилась в июне 2007 года и изначально поддерживала только язык программирования Ruby, но на данный момент список поддерживаемых языков также включает в себя Java, Node.js, Scala, Clojure, Python, Go и PHP. На серверах Heroku используются операционные системы Debian или Ubuntu. Приложения, работающие на Heroku, используют также DNS-сервер Heroku (обычно приложения имеют доменное имя вида «имя_приложения.herokuapp.com»). Для каждого приложения выделяется несколько независимых виртуальных процессов, которые называются «dynos». Они распределены по специальной виртуальной сетке («dynos grid»), которая состоит из нескольких серверов. Heroku также имеет систему контроля версий Git.</p>
              </div>
            </div>
            <div className="abstract__text-part">
              <span>3.1</span>
              <h3>Распознавание рукописных цифр</h3>
              <div className="abstract__text-block">
                <p>Распознавание символов, в частности рукописных цифр, </p>
                <p>Для любого проекта по машинному обучению, одним из основополагающих моментов является вопрос о том, какие данные использовать и где их взять. Для распознавнаия рукописных цифр активно используется датасет MNIST.</p>
                <p>База данных MNIST (сокращение от «Mixed National Institute of Standards and Technology») — объёмная база данных образцов рукописного написания цифр. База данных является стандартом, предложенным Национальным институтом стандартов и технологий США с целью калибрации и сопоставления методов распознавания изображений с помощью машинного обучения в первую очередь на основе нейронных сетей. Данные состоят из заранее подготовленных примеров изображений, на основе которых проводится обучение и тестирование систем. База данных была создана после переработки оригинального набора черно-белых образцов размером 20x20 пикселей NIST. Создатели базы данных NIST, в свою очередь, использовали набор образцов из Бюро переписи населения США, к которому были добавлены ещё тестовые образцы, написанные студентами американских университетов. Образцы из набора NIST были нормализированы, прошли сглаживание и приведены к серому полутоновому изображению размером 28x28 пикселей.</p>
                <p>База данных MNIST содержит 60 000 изображений для обучения и 10 000 изображений для тестирования. Половина образцов для обучения и тестирования были взяты из набора NIST для обучения, а другая половина — из набора NIST для тестирования.</p>
                <p>На сегоднящний день существует множество алгоритмов, способных распознавать рукописные цифры, например <a href="https://ru.wikipedia.org/wiki/Метод_k-ближайших_соседей" target="_blank" rel="noopener noreferrer">метод k ближайших соседей</a>, <a href="https://ru.wikipedia.org/wiki/Метод_опорных_векторов" target="_blank" rel="noopener noreferrer">метод опорных векторов</a>, способные распознавать рукописные цифры с точностью 99.46% и 99.44% соответственно. Однако, наиболее перспективными направлением классификации изображений сегодня являются нейросети.</p>
                <p></p>
              </div>
            </div>
            <div className="abstract__text-part">
              <span>3.2</span>
              <h3>Обзор популярных библиотек для построения нейросетей</h3>
              <div className="abstract__text-block">
                <p>Рассмотрим две библиотеки для построения нейросетей: <a href="https://www.tensorflow.org/" target="_blank" rel="noopener noreferrer">Tensorflow</a> и <a href="https://keras.io/" target="_blank" rel="noopener noreferrer">Keras</a>.</p>
                <p>TensorFlow — открытая программная библиотека для машинного обучения, разработанная компанией Google для решения задач построения и тренировки нейронной сети с целью автоматического нахождения и классификации образов, достигая качества человеческого восприятия. TensorFlow применяются для исследований, так и для разработки продуктов Google. TensorFlow является продолжением закрытого проекта DistBelief. Изначально, TensorFlow была разработана командой Google Brain для внутреннего использования в Google, а потом (9 ноября 2015 года) была переведена в свободный доступ с открытой лицензией Apache 2.0.</p>
                <p>Вычисления TensorFlow выражаются в виде потоков данных через граф состояний. Название TensorFlow происходит от операций с многомерными массивами данных, которые также называются «тензорами». В июне 2016 года Джефф Дин из Google отметил, что к TensorFlow обращались 1500 репозиториев на GitHub, и только 5 из них были от Google.</p>
                <p>Среди приложений, для которых TensorFlow является основой, является программное обеспечение автоматизированной аннотации изображений, такое как DeepDream. 26 октября 2015 года Google официально реализовала RankBrain, который поддерживает TensorFlow. RankBrain обрабатывает существенное число поисковых записей, заменяя и дополняя традиционные статические алгоритмы на основе результатов поиска.</p>
                <p>Keras — открытая нейросетевая библиотека, написанная на языке Python. Она представляет собой надстройку над фреймворками Deeplearning4j, TensorFlow и Theano. Нацелена на оперативную работу с сетями глубинного обучения, при этом спроектирована так, чтобы быть компактной, модульной и расширяемой. Она была создана как часть исследовательских усилий проекта ONEIROS (англ. Open-ended Neuro-Electronic Intelligent Robot Operating System), а ее основным автором и поддерживающим является Франсуа Шолле (фр. François Chollet), инженер Google.</p>
                <p>Эта библиотека содержит многочисленные реализации широко применяемых строительных блоков нейронных сетей, таких как слои, целевые и передаточные функции, оптимизаторы, и множество инструментов для упрощения работы с изображениями и текстом. Ее код размещен на GitHub, а форумы поддержки включают страницу вопросов GitHub, канал Gitter и канал Slack. На сентябрь 2016 года Keras является второй по скорости роста системой глубинного обучения после TensorFlow Google, и третьей по размеру после TensorFlow и Caffe.</p>
                <p>Keras является мощным инструментом и одновременно простым инструментом, для создания разлчных видов нейросетей.</p>
              </div>
            </div>
            <div className="abstract__text-part">
              <span>3.3</span>
              <h3>Создание нейросетей с помощью популярных библиотек и сравнение классификации построенных нейросетей</h3>
              <div className="abstract__text-block">
                <p>Для создания нейросетей, будем использовать TensorFlow и Keras в качестве надстройки. Будем рассматривать 2 архитектуры нейросетей: полносвязную нейронную сеть (<a href="https://en.wikipedia.org/wiki/Feedforward_neural_network" target="_blank" rel="noopener noreferrer">FNN</a>) и сверточную нейронную сеть (<a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B2%D1%91%D1%80%D1%82%D0%BE%D1%87%D0%BD%D0%B0%D1%8F_%D0%BD%D0%B5%D0%B9%D1%80%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D1%81%D0%B5%D1%82%D1%8C" target="_blank" rel="noopener noreferrer">CNN</a>). Я не буду подробно останавливаться на принципах работы данных архитектур, подробнее о них можно почитать по приведенным ссылкам. Созданные для данного приложения нейросети, принимают на вход изображение размером 28x28 пикселей. Так как обучение проводилось на базе MNIST, то изображения должны содержать белую цифру на черном фоне, в противном случае точность классификации сильно падает.</p>
                <p>Созданная нейросеть прямого расптраненения (FNN) характерихуется следующими параметрами: 768 нейронов во входном слое, 2 скрытых слоя по 512 нейронов каждый с функцией активации — <a href="https://en.wikipedia.org/wiki/Rectifier_(neural_networks)" target="_blank" rel="noopener noreferrer">ReLU</a> и 10 выходных нейронов с функцией активации <a href="https://ru.wikipedia.org/wiki/Softmax" target="_blank" rel="noopener noreferrer">Softmax</a>. В качестве функции потерь использовалась <a href="https://ru.wikipedia.org/wiki/%D0%9F%D0%B5%D1%80%D0%B5%D0%BA%D1%80%D1%91%D1%81%D1%82%D0%BD%D0%B0%D1%8F_%D1%8D%D0%BD%D1%82%D1%80%D0%BE%D0%BF%D0%B8%D1%8F" target="_blank" rel="noopener noreferrer">перекрестная энтропия</a>. Обучение проводилось в течение 20 эпох на 60 000 примерах, после чего нейросеть тестировалась еще на 10 000 примерах. Точность работы FNN нейросети на тестовых данных составила: 98.56%</p>
                <p>Сверточная нейронная сеть (CNN) содержит 9 скрытых слоев, 10 выходных нейронов. Активационная функция выходного слоя и функция потерь такие же как и у нейросети прямого распространения. Обучение проводилось в течение 10 эпох на 60 000 примерах, после чего нейросеть тестировалась еще на 10 000 примерах. Точность работы CNN нейросети на тестовых данных составила: 99.7%</p>
                <p></p>
                <p></p>
              </div>
            </div>
            <div className="abstract__text-part">
              <span>3.4</span>
              <h3>Создание веб-приложения с помощью Python Django Framework</h3>
              <div className="abstract__text-block">
                <p>Создание веб-приложения начнем с разработки клиентской части. Для этого будем использовать React.js, так как наше приложение будет одностраничным, а React был создан для проектирования одностраничных приложений. В основе React.js лежит использование компонентов. Каждый компонент является самостоятельным блоком. Также у компонентов есть возможность «общаться» друг с другом. Такой подход к реализации интерфейсов дает возможность гибко изменять содержимое веб-страницы.</p>
                <p>Не будем перегружать интерфейс приложения и ограничимся четырьмя основными компонентами:</p>
                <p><span>1.</span>полем для рисования цифр</p>
                <p><span>2.</span>компонент содержащий блок кнопок (для очитски поля и отправки данных на сервер)</p>
                <p><span>3.</span>компонент с описанием нашего приложения</p>
                <p><span>4.</span>компонент, в котором будет отображаться результат предсказания.</p>
                <p>Поле для рисования цифр реализуем с помощью элемента HTML5 — Canvas, размер поля для рисования выберем 500x500 пикселей. Полученную картинку будем передавать с помощью AJAX запроса, таким образом наша страница не будет перезагружена при отравке данных на сервер. Перед отправкой на сервер, содержимое Canvas кодируется с помощью алгоритма <a href="https://ru.wikipedia.org/wiki/Base64" target="_blank" rel="noopener noreferrer">Base64</a>. Под полем для рисования разместим блок кнопок, который будет содержать две кнопки «Отправить» и «Очистить» - для отправки картинки на сервер и для очистки поля для рисования.</p>
                <p>Правее Canvas разместим блок с описанием приложения и блок с результатом предсказания. Блок с результатом будет скрытым, до тех пор, пока пользователь не отправит на сервер картинку. Также добавим простую «шапку» с названием нашего приложения. Полученная клиентская часть показана на рисунке ниже.</p>
                <div className="image-container"><img src={image1} alt="Приложение до отправки картинки на сервер" /></div>
                <p className="image-description">Клиентская часть приложения сразу после загрузки</p>
                <div className="image-container"><img src={image2} alt="Приложение после получения результата предсказания" /></div>
                <p className="image-description">Клиентская часть приложения после получения результата предсказания</p>
                <p>После отправки изображения, сервер принимает ее, декодирует из Base64. После этого изображение проходит предобработку: переаодим изображение в черно-белое, получаем его негатив (так как нейросеть обучалась на изображениях, в которых белые цифры находятся на черном фоне), и размер изображения изменяется с 28x28 пикселей. Процесс изменения размера изображения рассмотрим подробнеее. Для того, чтобы нейросеть одинаково обрабатывала цифры различных размеров, используется следующий алгоритм. Сначала из исходного изображения, размером 500x500 пикселей вырезается та его часть, которая содержит цифру. Потом изменяем размер вырезанного изображения таким образом, чтобы его высота была равна 20 пикселей, а ширина вычисляется таким образом, чтобы сохрнить пропорции исходного изображения. После этого полученная цифра размещается в центре изображения размером 28x28 пикселей. Процесс подготовки изображения для распознавания показан на рисунке (черная рамка показывают границы изображения для наглядности, они отсутствуют в реальных изображениях).</p>
                <div className="image-container"><img src={image3} alt="Процесс подготовки изображения" /></div>
                <p>После этого изображение подается на вход нейросетей. Нейросети предсказывают цифру, изображенную на изображении. После чего функция обработки AJAX запроса возвращает JSON-файл, который содержит результат предсказания нейросетей. Клиентская часть обрабатывает полученный JSON-файл и обновляет веб-страницу без ее перезагрузки.</p>
              </div>
            </div>
            <div className="abstract__text-part">
              <span>4</span>
              <h3>Размещение веб-приложения на платформе Heroku</h3>
              <div className="abstract__text-block">
                <p>Пришло время рассказать о том, как разместить сайт на Heroku. Heroku — облачная платформа, поддерживающая несколько языков, и позволяющая быстро и удобно разворачивать веб-приложения. Есть возможность использовать Postgres и много чего интересного. Вообще говоря, я мог бы хранить изображения, используя ресурсы Heroku, но мне нужно хранить разные типы данных, поэтому проще было использовать отдельное облако.</p>
                <p>Heroku предлагает несколько ценовых планов, но для моего приложения (в том числе полноценного, а не этого маленького) вполне хватает бесплатного. Единственный минус — приложение «засыпает» через полчаса активности и при следующем запуске оно может потратить секунд 30 на «просыпание».</p>
                <p>В сети можно найти много гайдов по разворачиванию приложений на Heroku (вот ссылка на <a href="https://devcenter.heroku.com/articles/getting-started-with-python#introduction" target="_blank" rel="noopener noreferrer">официальный</a>), большинство из них использует консоль.</p>
                <p>Для подготовки приложения нужно создать несколько файлов:</p>
                <p><span>1.</span>необходима система контроля версий .git. Обычно она создаётся автоматически при создании репозитория github, но нужно проверить, что она действительно есть;</p>
                <p><span>2.</span>runtime.txt — в этом файле должна быть указана необходимая версия используемого языка программирования, в моём случае — python-3.6.1;</p>
                <p><span>3.</span>Procfile — это файл без расширения. В нём указывается, какие команды должны запускаться на heroku. Здесь определяется тип процесса web, что запускается и адрес (например: «web: gunicorn digitsClassifier.wsgi —log-file -»)</p>
                <p><span>4.</span>requirements.txt — список библиотек, которые будут установлены на Heroku. Лучше указывать нужные версии;</p>
                <p>Чтобы воспользоваться написанным приложением, нужно перейти по <a href="https://digits-classifier.herokuapp.com/" target="_blank" rel="noopener noreferrer">ссылке.</a></p>
                <p>Исходные коды всех частей приложения можно найти на <a href="https://github.com/MikhailZhyhariev/digits-classifier" target="_blank" rel="noopener noreferrer">Github</a>. Репозиторий содержит три ветки: master сожержит веб-приложение целиком, frontend — клиентскую часть приложения, а ветка neural-network содержит исходные коды нейросетей, которые используются для распознавания</p>
              </div>
            </div>
            <div className="abstract__text-part">
              <h3>Список источников</h3>
              <div className="abstract__text-block">
                <p><span>1.</span>Официальная документация библиотеки <a href="https://reactjs.org/" target="_blank" rel="noopener noreferrer">React.js</a>.</p>
                <p><span>2.</span>Официальная документация <a href="https://docs.djangoproject.com/en/1.11/" target="_blank" rel="noopener noreferrer">Django Framework</a>.</p>
                <p><span>3.</span>Официальная документация хостинга <a href="https://devcenter.heroku.com/articles/getting-started-with-python#introduction" target="_blank" rel="noopener noreferrer">Heroku</a>.</p>
                <p><span>4.</span>Официальная документация <a href="https://keras.io/" target="_blank" rel="noopener noreferrer">Keras</a>.</p>
                <p><span>5.</span>Официальная документация python-библиотеки для машинного обучения <a href="http://scikit-learn.org/" target="_blank" rel="noopener noreferrer">Scikit</a>.</p>
                <p><span>6.</span>Официальная документация javascript-библиотеки для отправки ajax-запросов <a href="https://www.npmjs.com/package/axios" target="_blank" rel="noopener noreferrer">Axios</a>.</p>
                <p><span>7.</span>Топливо для ИИ: подборка открытых датасетов для машинного обучения / Сообщество сайта Хабрахабр <a href="https://habrahabr.ru/company/mailru/blog/339496/" target="_blank" rel="noopener noreferrer">habrahabr.ru</a>.</p>
              </div>
            </div>
          </article>
        </div>
      </div>
    );
  }
}

function mapStateToProps(state) {
  return {
    menu: state.menu
  }
}
export default connect(mapStateToProps)(IndividualSection)
